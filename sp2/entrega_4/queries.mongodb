const database = 'new_york_restaurants';
use(database);

//db.restaurants.find();
//db.restaurants.find({}, {restaurant_id: 1, name: 1, borough:1, cuisine: 1});
//db.restaurants.find({}, {restaurant_id: 1, name: 1, borough:1, cuisine: 1, _id: 0});
//db.restaurants.find({}, {restaurant_id: 1, name: 1, borough:1, address: {zipcode: 1}, _id: 0});
//db.restaurants.find({borough: "Bronx"});
//db.restaurants.find({borough: "Bronx"}).limit(5);
//db.restaurants.find({borough: "Bronx"}).limit(5).skip(5);
//db.restaurants.find({"grades.score": {$gt: 90}});
//db.restaurants.find({"grades": {$elemMatch: {score: {$gt: 80, $lte: 100}}}});

GOT STUCK HERE!!!!!!!!!!!!!!!!!!!!

db.restaurants.find({address.building: {"469"}});
//{"coord": -73.856077}});


// // Run a find command to view items sold on April 4th, 2014.
// db.sales.find({ date: { $gte: new Date('2014-04-04'), $lt: new Date('2014-04-05') } });


// // Build an aggregation to view total sales for each product in 2014.
// const aggregation = [
//   { $match: { date: { $gte: new Date('2014-01-01'), $lt: new Date('2015-01-01') } } },
//   { $group: { _id: '$item', totalSaleAmount: { $sum: { $multiply: [ '$price', '$quantity' ] } } } }
// ];

// // Run the aggregation and open a cursor to the results.
// // Use toArray() to exhaust the cursor to return the whole result set.
// // You can use hasNext()/next() to iterate through the cursor page by page.
// db.sales.aggregate(aggregation);
